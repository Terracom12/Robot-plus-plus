/*
* Copyright (c) 2019 Matthew Reese
*
* Permission is hereby granted, free of charge, to any person obtaining
* a copy of this software and associated documentation files (the
* "Software"), to deal in the Software without restriction, including
* without limitation the rights to use, copy, modify, merge, publish,
* distribute, sublicense, and/or sell copies of the Software, and to
* permit persons to whom the Software is furnished to do so, subject to
* the following conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#ifndef ROBOT_
#define ROBOT_

#define TRACKWIDTH 3.69

#include <stdbool.h>
#include <linkbot.h>

#ifndef _SIZE_T_DEFINED
#define _SIZE_T_DEFINED
typedef unsigned long long size_t;
#endif _SIZE_T_DEFINED

enum {
  CIRCLE = 0,
  TRIANGLE = 3,
  SQUARE,
  PENTAGON,
  HEXAGON,
  HEPTAGON,
  OCTOGON,
  NONOGON,
  DECAGON
};

#ifndef VEC_2
#define VEC_2
typedef struct
{
  double x;
  double y;
} vec2;
#endif // VEC_2

#ifndef VEC_2_ARRAY
#define VEC_2_ARRAY
typedef struct
{
  vec2 *data;
  size_t size;
} vec2_array;
#endif // VEC_2_ARRAY

class Robot {
public:
  Robot();

  void init(double x, double y, double angle, double radius);

  void drive(double distance);
  void driveNB(double distance);
  void driveTo(double x, double y);
  void driveToNB(double x, double y);
  bool drivePathTo(vec2_array points, vec2 start, vec2 goal, double points_x_distance, double points_y_distance);
  void turn(double degrees);
  void turnNB(double degrees);
  void turnArc(double radius, double degrees);
  void turnArcNB(double radius, double degrees);

  void driveShape(int kind_shape, double side_length);

  void wait(double seconds);
  void waitMillis(double milliseconds);

  //void LED(const char *color);

  // TODO: `face` method

  CLinkbotI *getRobot();
  vec2 getPosition();
  double getRotation();

  virtual ~Robot();
private:
  CLinkbotI *m_robo;
  const double s_trackwidth;
  double m_radius;
};

// Defines methods
#include "robot.inl"

#endif /* ROBOT_ */
